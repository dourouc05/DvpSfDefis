CREATE TABLE doc_page (id BIGINT AUTO_INCREMENT, name VARCHAR(50), rep VARCHAR(25), dwid VARCHAR(75) UNIQUE, togen TINYINT(1), kind VARCHAR(255) DEFAULT 'class', PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE profile (id BIGINT, pseudo VARCHAR(63), name VARCHAR(127), short VARCHAR(23)) ENGINE = INNODB;
CREATE TABLE qt_class (id BIGINT AUTO_INCREMENT, name TEXT, veradded BIGINT, INDEX veradded_idx (veradded), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE quarterly (id BIGINT AUTO_INCREMENT, number MEDIUMINT, title VARCHAR(127), url VARCHAR(255), summary LONGTEXT, user_id BIGINT, forum TEXT, hidden TINYINT(1), INDEX user_id_idx (user_id), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE redir (id BIGINT AUTO_INCREMENT, english VARCHAR(63), french VARCHAR(63), rep VARCHAR(63), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE relation (id BIGINT AUTO_INCREMENT, class BIGINT, child BIGINT, INDEX class_idx (class), INDEX child_idx (child), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE tr_kind (id BIGINT AUTO_INCREMENT, title VARCHAR(255), url_forum TINYINT(1), url_wiki TINYINT(1), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE tr_status (id BIGINT AUTO_INCREMENT, title VARCHAR(127), colour VARCHAR(127), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE tr_translation (id BIGINT AUTO_INCREMENT, kind_id BIGINT, forum TEXT, title VARCHAR(255), original VARCHAR(255), translation VARCHAR(255), status_id BIGINT, notes text, INDEX kind_id_idx (kind_id), INDEX status_id_idx (status_id), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE tr_translation_person (id BIGINT AUTO_INCREMENT, translation_id BIGINT, user_id BIGINT, INDEX user_id_idx (user_id), INDEX translation_id_idx (translation_id), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE version (id BIGINT AUTO_INCREMENT, name TEXT, PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE binaire (id BIGINT AUTO_INCREMENT, shown TINYINT(1), versionm BIGINT, versionp VARCHAR(20), compiler TEXT, os BIGINT, bitness BIGINT, weight BIGINT, http TEXT, ftp TEXT, torrent TEXT, metalink TEXT, accessibility TINYINT(1), qt3 TINYINT(1), mysql TEXT, postgresql TEXT, sqlite3 TINYINT(1), openssl TEXT, dbus TEXT, webkit TINYINT(1), quick TINYINT(1), qwt_ver TEXT, qwt_url TEXT, qtopencl_ver TEXT, qtopencl_url TEXT, INDEX compiler_idx (compiler), INDEX os_idx (os), INDEX bitness_idx (bitness), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE bitness (id BIGINT AUTO_INCREMENT, name VARCHAR(63), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE categoryofcriteria_translation (id BIGINT, name VARCHAR(255), lang CHAR(2), PRIMARY KEY(id, lang)) ENGINE = INNODB;
CREATE TABLE categoryofcriteria (id BIGINT AUTO_INCREMENT, challenge BIGINT, INDEX challenge_idx (challenge), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE certif (id BIGINT AUTO_INCREMENT, nom TEXT, image TEXT, PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE challenge_translation (id BIGINT, name VARCHAR(127), description LONGTEXT, instructions LONGTEXT, expectedbehaviour LONGTEXT, filestohand LONGTEXT, targets LONGTEXT, desccriteria LONGTEXT, lang CHAR(2), slug VARCHAR(255), UNIQUE INDEX challenge_translation_sluggable_idx (slug), PRIMARY KEY(id, lang)) ENGINE = INNODB;
CREATE TABLE challenge (id BIGINT AUTO_INCREMENT, forum VARCHAR(127), start DATE, end DATE, PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE compiler (id BIGINT AUTO_INCREMENT, name VARCHAR(63), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE config (param VARCHAR(127) UNIQUE, value LONGTEXT, PRIMARY KEY(param)) ENGINE = INNODB;
CREATE TABLE criteria_translation (id BIGINT, name VARCHAR(255), lang CHAR(2), PRIMARY KEY(id, lang)) ENGINE = INNODB;
CREATE TABLE criteria (id BIGINT AUTO_INCREMENT, challenge BIGINT, maximum BIGINT, cat BIGINT, type VARCHAR(255), INDEX challenge_idx (challenge), INDEX cat_idx (cat), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE downcompiler (id BIGINT AUTO_INCREMENT, name VARCHAR(63), version VARCHAR(63), os BIGINT, bitnessmain BIGINT, bitnesssecond BIGINT, weight BIGINT, http TEXT, ftp TEXT, torrent TEXT, metalink TEXT, INDEX os_idx (os), INDEX bitnessmain_idx (bitnessmain), INDEX bitnesssecond_idx (bitnesssecond), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE downdependency (id BIGINT AUTO_INCREMENT, name TEXT, os BIGINT, bitness BIGINT, url TEXT, INDEX os_idx (os), INDEX bitness_idx (bitness), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE downpatch (id BIGINT AUTO_INCREMENT, os BIGINT, bitness BIGINT, dependency BIGINT, weight BIGINT, http TEXT, ftp TEXT, torrent TEXT, metalink TEXT, INDEX os_idx (os), INDEX bitness_idx (bitness), INDEX dependency_idx (dependency), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE evaluation_translation (id BIGINT, comment TEXT, lang CHAR(2), PRIMARY KEY(id, lang)) ENGINE = INNODB;
CREATE TABLE evaluation (id BIGINT AUTO_INCREMENT, member BIGINT, jury BIGINT, challenge BIGINT, criteria BIGINT, note VARCHAR(15), INDEX jury_idx (jury), INDEX challenge_idx (challenge), INDEX criteria_idx (criteria), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE faq_category (id BIGINT AUTO_INCREMENT, name TEXT, faq_id BIGINT, lft INT, rgt INT, level SMALLINT, INDEX faq_id_idx (faq_id), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE faq_faq (id BIGINT AUTO_INCREMENT, name TEXT, rubrique TEXT, rubrique_gi BIGINT, rubrique_rc TEXT, edito LONGTEXT, PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE faq_publicated (id BIGINT AUTO_INCREMENT, faq_id BIGINT, qa_id BIGINT, qa_version BIGINT, INDEX faq_id_idx (faq_id), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE faq_q_a_version (id BIGINT, question TEXT, answer LONGTEXT, cat_id BIGINT, version BIGINT, PRIMARY KEY(id, version)) ENGINE = INNODB;
CREATE TABLE faq_q_a (id BIGINT AUTO_INCREMENT, question TEXT, answer LONGTEXT, cat_id BIGINT, version BIGINT, PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE juryman (id BIGINT AUTO_INCREMENT, challenge BIGINT, profile BIGINT, INDEX challenge_idx (challenge), INDEX profile_idx (profile), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE membre (id BIGINT AUTO_INCREMENT, nom TEXT, prenom TEXT, pseudo TEXT, resp TINYINT(1), redac TINYINT(1), ancien TINYINT(1), email TEXT, valide TINYINT(1), pyside TINYINT(1), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE membre_certif (id BIGINT AUTO_INCREMENT, membre BIGINT, certif BIGINT, INDEX membre_idx (membre), INDEX certif_idx (certif), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE membre_rang (id BIGINT AUTO_INCREMENT, membre BIGINT, rang BIGINT, INDEX membre_idx (membre), INDEX rang_idx (rang), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE membre_site (id BIGINT AUTO_INCREMENT, url TEXT, name TEXT, membre BIGINT, INDEX membre_idx (membre), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE os (id BIGINT AUTO_INCREMENT, name VARCHAR(63), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE presentation_translation (id BIGINT, description LONGTEXT, shortdescription LONGTEXT, title VARCHAR(63), lang CHAR(2), PRIMARY KEY(id, lang)) ENGINE = INNODB;
CREATE TABLE presentation (id BIGINT AUTO_INCREMENT, member BIGINT, challenge BIGINT, forum VARCHAR(255), slug VARCHAR(63), UNIQUE INDEX presentation_sluggable_idx (slug), INDEX member_idx (member), INDEX challenge_idx (challenge), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE rang (id BIGINT AUTO_INCREMENT, nom TEXT, useraddable TINYINT(1), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE sf_guard_forgot_password (id BIGINT AUTO_INCREMENT, user_id BIGINT NOT NULL, unique_key VARCHAR(255), expires_at DATETIME NOT NULL, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, INDEX user_id_idx (user_id), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE sf_guard_group (id BIGINT AUTO_INCREMENT, name VARCHAR(255) UNIQUE, description TEXT, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE sf_guard_group_permission (group_id BIGINT, permission_id BIGINT, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, PRIMARY KEY(group_id, permission_id)) ENGINE = INNODB;
CREATE TABLE sf_guard_permission (id BIGINT AUTO_INCREMENT, name VARCHAR(255) UNIQUE, description TEXT, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE sf_guard_remember_key (id BIGINT AUTO_INCREMENT, user_id BIGINT, remember_key VARCHAR(32), ip_address VARCHAR(50), created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, INDEX user_id_idx (user_id), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE sf_guard_user (id BIGINT AUTO_INCREMENT, first_name VARCHAR(255), last_name VARCHAR(255), email_address VARCHAR(255) NOT NULL UNIQUE, username VARCHAR(128) NOT NULL UNIQUE, algorithm VARCHAR(128) DEFAULT 'sha1' NOT NULL, salt VARCHAR(128), password VARCHAR(128), is_active TINYINT(1) DEFAULT '1', is_super_admin TINYINT(1) DEFAULT '0', last_login DATETIME, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, INDEX is_active_idx_idx (is_active), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE sf_guard_user_group (user_id BIGINT, group_id BIGINT, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, PRIMARY KEY(user_id, group_id)) ENGINE = INNODB;
CREATE TABLE sf_guard_user_permission (user_id BIGINT, permission_id BIGINT, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, PRIMARY KEY(user_id, permission_id)) ENGINE = INNODB;
CREATE TABLE string (id BIGINT AUTO_INCREMENT, lang VARCHAR(7), ids VARCHAR(63), content LONGTEXT, PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE user (id BIGINT UNIQUE, username VARCHAR(255), jury TINYINT(1), admin TINYINT(1), address_name VARCHAR(255), address_street VARCHAR(255), address_number VARCHAR(255), address_postcode VARCHAR(255), address_city VARCHAR(255), address_country VARCHAR(255), PRIMARY KEY(id)) ENGINE = INNODB;
ALTER TABLE qt_class ADD CONSTRAINT qt_class_veradded_version_id FOREIGN KEY (veradded) REFERENCES version(id);
ALTER TABLE quarterly ADD CONSTRAINT quarterly_user_id_sf_guard_user_id FOREIGN KEY (user_id) REFERENCES sf_guard_user(id);
ALTER TABLE relation ADD CONSTRAINT relation_class_qt_class_id FOREIGN KEY (class) REFERENCES qt_class(id);
ALTER TABLE relation ADD CONSTRAINT relation_child_qt_class_id FOREIGN KEY (child) REFERENCES qt_class(id);
ALTER TABLE tr_translation ADD CONSTRAINT tr_translation_status_id_tr_status_id FOREIGN KEY (status_id) REFERENCES tr_status(id);
ALTER TABLE tr_translation ADD CONSTRAINT tr_translation_kind_id_tr_kind_id FOREIGN KEY (kind_id) REFERENCES tr_kind(id);
ALTER TABLE tr_translation_person ADD CONSTRAINT tr_translation_person_user_id_sf_guard_user_id FOREIGN KEY (user_id) REFERENCES sf_guard_user(id);
ALTER TABLE tr_translation_person ADD CONSTRAINT tr_translation_person_translation_id_tr_translation_id FOREIGN KEY (translation_id) REFERENCES tr_translation(id);
ALTER TABLE binaire ADD CONSTRAINT binaire_os_os_id FOREIGN KEY (os) REFERENCES os(id);
ALTER TABLE binaire ADD CONSTRAINT binaire_compiler_compiler_id FOREIGN KEY (compiler) REFERENCES compiler(id);
ALTER TABLE binaire ADD CONSTRAINT binaire_bitness_bitness_id FOREIGN KEY (bitness) REFERENCES bitness(id);
ALTER TABLE categoryofcriteria_translation ADD CONSTRAINT categoryofcriteria_translation_id_categoryofcriteria_id FOREIGN KEY (id) REFERENCES categoryofcriteria(id) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE categoryofcriteria ADD CONSTRAINT categoryofcriteria_challenge_challenge_id FOREIGN KEY (challenge) REFERENCES challenge(id);
ALTER TABLE challenge_translation ADD CONSTRAINT challenge_translation_id_challenge_id FOREIGN KEY (id) REFERENCES challenge(id) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE criteria_translation ADD CONSTRAINT criteria_translation_id_criteria_id FOREIGN KEY (id) REFERENCES criteria(id) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE criteria ADD CONSTRAINT criteria_challenge_challenge_id FOREIGN KEY (challenge) REFERENCES challenge(id);
ALTER TABLE criteria ADD CONSTRAINT criteria_cat_categoryofcriteria_id FOREIGN KEY (cat) REFERENCES categoryofcriteria(id);
ALTER TABLE downcompiler ADD CONSTRAINT downcompiler_os_os_id FOREIGN KEY (os) REFERENCES os(id);
ALTER TABLE downcompiler ADD CONSTRAINT downcompiler_bitnesssecond_bitness_id FOREIGN KEY (bitnesssecond) REFERENCES bitness(id);
ALTER TABLE downcompiler ADD CONSTRAINT downcompiler_bitnessmain_bitness_id FOREIGN KEY (bitnessmain) REFERENCES bitness(id);
ALTER TABLE downdependency ADD CONSTRAINT downdependency_os_os_id FOREIGN KEY (os) REFERENCES os(id);
ALTER TABLE downdependency ADD CONSTRAINT downdependency_bitness_bitness_id FOREIGN KEY (bitness) REFERENCES bitness(id);
ALTER TABLE downpatch ADD CONSTRAINT downpatch_os_os_id FOREIGN KEY (os) REFERENCES os(id);
ALTER TABLE downpatch ADD CONSTRAINT downpatch_dependency_downdependency_id FOREIGN KEY (dependency) REFERENCES downdependency(id);
ALTER TABLE downpatch ADD CONSTRAINT downpatch_bitness_bitness_id FOREIGN KEY (bitness) REFERENCES bitness(id);
ALTER TABLE evaluation_translation ADD CONSTRAINT evaluation_translation_id_evaluation_id FOREIGN KEY (id) REFERENCES evaluation(id) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE evaluation ADD CONSTRAINT evaluation_jury_user_id FOREIGN KEY (jury) REFERENCES user(id);
ALTER TABLE evaluation ADD CONSTRAINT evaluation_criteria_criteria_id FOREIGN KEY (criteria) REFERENCES criteria(id);
ALTER TABLE evaluation ADD CONSTRAINT evaluation_challenge_challenge_id FOREIGN KEY (challenge) REFERENCES challenge(id);
ALTER TABLE faq_category ADD CONSTRAINT faq_category_faq_id_faq_faq_id FOREIGN KEY (faq_id) REFERENCES faq_faq(id);
ALTER TABLE faq_publicated ADD CONSTRAINT faq_publicated_faq_id_faq_faq_id FOREIGN KEY (faq_id) REFERENCES faq_faq(id);
ALTER TABLE faq_q_a_version ADD CONSTRAINT faq_q_a_version_id_faq_q_a_id FOREIGN KEY (id) REFERENCES faq_q_a(id) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE juryman ADD CONSTRAINT juryman_profile_user_id FOREIGN KEY (profile) REFERENCES user(id);
ALTER TABLE juryman ADD CONSTRAINT juryman_challenge_challenge_id FOREIGN KEY (challenge) REFERENCES challenge(id);
ALTER TABLE membre_certif ADD CONSTRAINT membre_certif_membre_membre_id FOREIGN KEY (membre) REFERENCES membre(id);
ALTER TABLE membre_certif ADD CONSTRAINT membre_certif_certif_certif_id FOREIGN KEY (certif) REFERENCES certif(id);
ALTER TABLE membre_rang ADD CONSTRAINT membre_rang_rang_rang_id FOREIGN KEY (rang) REFERENCES rang(id);
ALTER TABLE membre_rang ADD CONSTRAINT membre_rang_membre_membre_id FOREIGN KEY (membre) REFERENCES membre(id);
ALTER TABLE membre_site ADD CONSTRAINT membre_site_membre_membre_id FOREIGN KEY (membre) REFERENCES membre(id);
ALTER TABLE presentation_translation ADD CONSTRAINT presentation_translation_id_presentation_id FOREIGN KEY (id) REFERENCES presentation(id) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE presentation ADD CONSTRAINT presentation_member_user_id FOREIGN KEY (member) REFERENCES user(id);
ALTER TABLE presentation ADD CONSTRAINT presentation_challenge_challenge_id FOREIGN KEY (challenge) REFERENCES challenge(id);
ALTER TABLE sf_guard_forgot_password ADD CONSTRAINT sf_guard_forgot_password_user_id_sf_guard_user_id FOREIGN KEY (user_id) REFERENCES sf_guard_user(id) ON DELETE CASCADE;
ALTER TABLE sf_guard_group_permission ADD CONSTRAINT sf_guard_group_permission_permission_id_sf_guard_permission_id FOREIGN KEY (permission_id) REFERENCES sf_guard_permission(id) ON DELETE CASCADE;
ALTER TABLE sf_guard_group_permission ADD CONSTRAINT sf_guard_group_permission_group_id_sf_guard_group_id FOREIGN KEY (group_id) REFERENCES sf_guard_group(id) ON DELETE CASCADE;
ALTER TABLE sf_guard_remember_key ADD CONSTRAINT sf_guard_remember_key_user_id_sf_guard_user_id FOREIGN KEY (user_id) REFERENCES sf_guard_user(id) ON DELETE CASCADE;
ALTER TABLE sf_guard_user_group ADD CONSTRAINT sf_guard_user_group_user_id_sf_guard_user_id FOREIGN KEY (user_id) REFERENCES sf_guard_user(id) ON DELETE CASCADE;
ALTER TABLE sf_guard_user_group ADD CONSTRAINT sf_guard_user_group_group_id_sf_guard_group_id FOREIGN KEY (group_id) REFERENCES sf_guard_group(id) ON DELETE CASCADE;
ALTER TABLE sf_guard_user_permission ADD CONSTRAINT sf_guard_user_permission_user_id_sf_guard_user_id FOREIGN KEY (user_id) REFERENCES sf_guard_user(id) ON DELETE CASCADE;
ALTER TABLE sf_guard_user_permission ADD CONSTRAINT sf_guard_user_permission_permission_id_sf_guard_permission_id FOREIGN KEY (permission_id) REFERENCES sf_guard_permission(id) ON DELETE CASCADE;
